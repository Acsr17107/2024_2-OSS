## 10주차: 임시 저장(Stash)과 관련 명령어

### 1. OSS와 가장 관련이 적은 것은?
- **정답**: ④ Copyright  
- **해설**: OSS(오픈소스 소프트웨어)는 자유 소프트웨어(FOSS)의 개념에 가깝고 Copyleft나 리차드 스톨만과 관련이 깊다.  
  하지만 Copyright(저작권)은 저작권 보호의 개념으로 OSS는 특정 라이선스를 통해 저작권을 제한하지 않고 공유하는 개념이다.

### 2. stash의 기능에 해당하지 않는 것은?
- **정답**: ③ 원격 저장소에 임시 저장 가능  
- **해설**: `git stash` 명령어는 작업 디렉터리의 변경 사항을 임시로 저장하는 기능이다.  
  `git stash`는 로컬 저장소에만 저장되며 원격 저장소와는 관계가 없다.  
  stash의 주요 기능은 작업 중인 파일의 변경 사항을 임시로 숨기고(branch를 전환), 나중에 다시 복원한다.

### 3. stash에 저장된 목록을 확인하는 명령어는?
- **정답**: ② git stash list  
- **해설**: `git stash list` 명령어는 현재 stash에 저장된 목록을 확인할 수 있는 명령어이다.  
  목록에는 `stash@{0}`, `stash@{1}` 등의 형태로 표시되며 각 stash의 메시지가 함께 출력된다.

---

## 11주차: 리베이스(Rebase)와 충돌 해결

### 1. 병합의 옵션이 아닌 것은?
- **정답**: ② --rebase  
- **해설**: `--rebase`는 `rebase` 명령의 옵션이지, `git merge` 명령의 옵션이 아니다.  
  병합(merge) 옵션에는 `--no-ff`, `--ff-only`, `--squash` 등이 있으며 각각 **빠른 병합 금지**, **fast-forward 병합만 허용**, **여러 커밋을 하나로 병합**하는 옵션이다.

### 2. 리베이스와 관련된 명령어로 적절하지 않은 것은?
- **정답**: ④ git merge  
- **해설**: `git merge`는 두 브랜치를 병합할 때 사용하는 명령어로, rebase와는 다른 개념이다.  
  리베이스 관련 명령어는 `git rebase`, `git rebase --interactive`, `git rebase --continue` 등으로, 이 명령어는 브랜치를 다시 정렬하고 커밋 이력을 깔끔하게 만든다.

### 3. 충돌이 발생했을 때 충돌 해결 후 명령어는?
- **정답**: ③ git add . && git rebase --continue  
- **해설**: 충돌이 발생하면 충돌 부분을 수정한 후에 `git add` 명령어로 스테이징한 다음 `git rebase --continue` 명령어로 리베이스를 이어간다.  
  **충돌 발생 시 필수 절차:**  
  1️⃣ 충돌 파일 수정  
  2️⃣ `git add .`로 변경 사항 스테이징  
  3️⃣ `git rebase --continue`로 리베이스 진행  

---

## 12주차: 리베이스와 커밋 이력 수정

### 1. 베이스를 바꾸는 재배치 명령어는?
- **정답**: ② git rebase main  
- **해설**: `git rebase main` 명령어는 현재 브랜치를 main 브랜치 위로 이동시키는 명령어이다.  
  **git rebase main의 동작 방식:**  
  1️⃣ main 브랜치 위로 현재 브랜치의 커밋을 이동  
  2️⃣ 커밋 이력이 병합 없이 깔끔해짐  

### 2. 커밋 메시지를 수정하는 명령어는?
- **정답**: ③ git commit --amend  
- **해설**: `git commit --amend` 명령어는 가장 최근의 커밋 메시지를 수정할 때 사용된다.  
  **수정 절차:**  
  1️⃣ 커밋 후 메시지에 오타가 있을 때 `git commit --amend` 명령어를 실행  
  2️⃣ 기존 커밋 메시지를 편집할 수 있다.  

### 3. 인터랙티브 리베이스를 실행하는 명령어는?
- **정답**: ① git rebase -i HEAD~3  
- **해설**: `git rebase -i HEAD~3` 명령어는 최근 3개의 커밋을 대상으로 인터랙티브 리베이스를 실행한다.  
  **-i 옵션:** 인터랙티브 모드로 실행되며 커밋을 **수정(pick)**, **스쿼시(squash)**, **삭제(drop)** 할 수 있다.  

---

## 13주차: 되돌리기 reset과 revert

### 1. 다음 중 reset의 주요 옵션이 아닌 것은?
- **정답**: ④ --head  
- **해설**: reset 명령의 주요 옵션으로는 `--soft`, `--mixed`, `--hard`가 있다.  
  - `--soft`: HEAD만 변경 (스테이징 영역, 작업 디렉터리는 유지)  
  - `--mixed`: HEAD와 스테이징 영역을 변경 (작업 디렉터리는 유지)  
  - `--hard`: HEAD, 스테이징 영역, 작업 디렉터리 모두 변경  
  **--head 옵션은 존재하지 않는다.**  

### 2. 명령 'git reset HEAD~'와 같은 명령은?
- **정답**: ① git reset --mixed HEAD~  
- **해설**: `git reset HEAD~`의 기본 동작 방식은 `--mixed` 옵션과 동일하다.  
  HEAD 포인터를 이전 커밋으로 이동하고 스테이징 영역은 초기화하지만 작업 디렉터리는 유지된다.  

### 3. 되돌리기 명령어로 잘못된 커밋을 취소하는 명령어는?
- **정답**: ② git revert  
- **해설**: `git revert`는 특정 커밋의 변경 사항을 되돌리는 명령어로 되돌리는 내용을 새로운 커밋으로 기록한다.  
  반면 `git reset`은 특정 커밋까지 이력 자체를 삭제하는 방식으로 팀 협업 중에는 위험할 수 있다.  

---
